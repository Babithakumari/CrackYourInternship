Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].

 

Recursive approach:
base case: if not root, return 
otherwise, 2 cases
1) within the range: add cur nodes value and calculate for right and left
2) outside the range: don't add cur node, if outside low range, move right only
if outside right range, move left only.

   def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -> int:

        if not root:
            return 0


        if root.val >= low and root.val <= high:
            return root.val + self.rangeSumBST(root.left,low,high) + self.rangeSumBST(root.right, low, high)

        elif root.val < low:
            # go only right
            return self.rangeSumBST(root.right,low,high)

        elif root.val > high:
            return self.rangeSumBST(root.left,low, high)


SOLUTION USING dfs:

class Solution:
    def rangeSumBST(self, root, low, high):
        def dfs(node):
            if not node: return
            if low <= node.val <= high: self.out += node.val
            if node.val > low:  dfs(node.left)
            if node.val < high: dfs(node.right)
                
        self.out = 0
        dfs(root)
        return self.out