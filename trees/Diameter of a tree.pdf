Given the root of a binary tree, return the length of the diameter of the tree.

The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

The length of a path between two nodes is represented by the number of edges between them.

 

 Approach:

 for each node in the tree, calculate height.
 Keep a variable res to store max-height that can be reached at any point.

 Here :
   2
  /  \
  3   4 => height of node 2 is "2". max(height of leftsubtree+1, height of rightsubtree + 1)


Therefore write a function to calculate height of a tree given the start node

CODE FOR height of node:

        def dfs(root):

            if not root:
               return 0

            return max(dfs(root.left)+1, dfs(root.right)+1)

        stack = []
        stack.append(root)
        res = 0

        while stack:
            node = stack.pop()
            cur_height = dfs(node.left) + dfs(node.right)
            res = max(cur_height, res)

            if node.left:
                stack.append(node.left)
            if node.right:
                stack.append(node.right)

        return res

