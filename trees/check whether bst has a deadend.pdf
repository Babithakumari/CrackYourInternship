Given a Binary search Tree that contains positive integer values greater than 0. The task is to check whether the BST contains a dead end or not. Here Dead End means, we are not able to insert any element after that node.

Approach:
If we take a closer look at the problem, we can notice that we basically need to check if there is a leaf node with value x such that x+1 and x-1 exist in BST with the exception of x = 1. For x = 1, we canâ€™t insert 0 as the problem statement says BST contains positive integers only.

To implement the above idea we first traverse the whole BST and store all nodes in a set. We also store all leaves in a separate hash to avoid re-traversal of BST. Finally, we check for every leaf node x, if x-1 and x+1 are present in set or not.

Code:

def isdeadEnd(root):
    # Code here
    path = set()
    path.add(0)
    
    leaf = set()
    
    inorder(root, path,leaf)
    
    for val in leaf:
        if val-1 in path and val+1 in path:
            return True
            
    return False

Time : O(N)
Space: O(N)