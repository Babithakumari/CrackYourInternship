Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.

A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.

 

Approach: Recursion.

isSubTree:

1) At each node, check if the tree formed by root is same as tree formed by subroot,
if so return true(this is checked by a helper function isSameTree)
2) if not, move to the left node and right node and check again separately.
Base case, if subTree is empty, return true
if root is empty return false

isSameTree:
1) if both the trees are empty, return true
2) otherwise if the  current-values match, check if both left and right subtrees are also sameTrees
if so return true
return false

CODE:

lass Solution:
    def sameTree(self, root, subRoot):
        if not root and not subRoot:
            return True

        if root and subRoot and root.val==subRoot.val:
            return (self.sameTree(root.left, subRoot.left) and self.sameTree(root.right, subRoot.right))

    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:

        # if subRoot is empty, exists in root(any leafnode's child is empty)
        if not subRoot:
            return True

        # if root itself null, we know subRoot is not null, therefore cannot exist
        if not root:
            return False

        if self.sameTree(root,subRoot):
            return True

        return (self.isSubtree(root.left, subRoot) or self.isSubtree(root.right, subRoot))

