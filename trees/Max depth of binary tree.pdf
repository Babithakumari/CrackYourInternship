Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.


Approach:
Recursion
suppose i am at root, i want to know height of left subtree and right subtree, of these whichever
is maximum that shall be the height of the root+1(rootnode)

this algorithm is applied recursively to all nodes,
until it reaches the base where the node is Null, return 0 then.

CODE:

        if not root:
            return 0

        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1

ITERATIVE
----------
start from root node.
add its children.
increment level variable by 1
do this until no more nodes to visit.

CODE
-----

        stack = []
        stack.append((root,1))
        level = 0

        while stack:
            node,level = stack.pop()

            if not node:
                continue

            maxDepth = max(maxDepth, level)

            stack.append((node.left, level+1))
            stack.append((node.right, level+1))

        return level