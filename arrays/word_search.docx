Approach 1: Brute Force/ Backtracking
1) Discover start of word pattern
2) Keep branching/visiting neighbours in all 4 directions to find if next letter exists, do this until no more letters found, if end of word is reached, word is found else not found




Code : 
       m = len(board)
       n = len(board[0])
       visited = set()


       def dfs(i,j,idx):


          
           if idx==len(word):
               return True


          


           if i<0 or j<0 or i>=m or j>=n:
               return False


           if word[idx] != board[i][j]:
               return False


           if (i,j) in visited:
               return False


           # otherwise letter matched
           visited.add((i,j))


           # traverse in all four directions to find answer
           res = (
               dfs(i+1,j, idx+1) or
               dfs(i-1,j, idx+1) or
               dfs(i, j-1, idx+1) or
               dfs(i, j+1, idx+1)
           )




           # remove it from visited because we are returning from this path/backtrack
           visited.remove((i,j))


           return res
             
       for i in range(m):
           for j in range(n):


               if dfs(i,j,0):
                   return True


       return False


Time Complexity => O(m*n*4^ n)
Space Complexity => O(1)



