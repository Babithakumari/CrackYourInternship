Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.


Approach:
1) keep traversing the ll, start with prev set to head
2) keep a count variable
3) Once count becomes k-1, we found a group of k-nodes, call reverse function, reverse the ll
    4) Before reversing the LL, make sure to save all nodes after it
    5) the reversed linked list returned must be assigned to the dummy node
    6) Update dummy node, to end of reversed list
    7) Update head to its next
    8) Make prev as None
9)elif count exceeds/ equals k, reset count to 0 prev to current node
1o) finally check if any nodes left out, if yes, attach to dummy
11) return dummy's head

CODE:
        if k==1:
            return head

        count= 0
        dummy = res = ListNode()
        prev = head

        while head:
            # reset
            if count >= k:
                count = 0
                prev = head

            # if k-nodes in group, reverse
            if count==k-1:
                afterHead = head.next
                reversedHead = self.reverse(prev,k)

                head = afterHead
                dummy.next = reversedHead
                dummy = prev
                prev = None

            else:
                head = head.next

            count += 1
            
        if prev:
            dummy.next = prev


        return res.next
              
