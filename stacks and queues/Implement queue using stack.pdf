Solution

Queue is FIFO (first in - first out) data structure, in which the elements are inserted from one side - rear and removed from the other - front.
The most intuitive way to implement it is with linked lists, but this article will introduce another approach using stacks.
Stack is LIFO (last in - first out) data structure, in which elements are added and removed from the same end, called top.
To satisfy FIFO property of a queue we need to keep two stacks. They serve to reverse arrival order of the elements and one of them store the queue elements in their final order.
Approach #1 (Two Stacks) Push - O(n)O(n)O(n) per operation, Pop - O(1)O(1)O(1) per operation.
Push

A queue is FIFO (first-in-first-out) but a stack is LIFO (last-in-first-out). This means the newest element must be pushed to the bottom of the stack. To do so we first transfer all s1 elements to auxiliary stack s2. Then the newly arrived element is pushed on top of s2 and all its elements are popped and pushed to s1.

Push an element in queue

Figure 1. Push an element in queue
Complexity Analysis**

    Time complexity : O(n)O(n)O(n).

Each element, with the exception of the newly arrived, is pushed and popped twice. The last inserted element is popped and pushed once. Therefore this gives 4n+24 n + 24n+2 operations where nnn is the queue size. The push and pop operations have O(1)O(1)O(1) time complexity.

    Space complexity : O(n)O(n)O(n).
    We need additional memory to store the queue elements

Pop

The algorithm pops an element from the stack s1, because s1 stores always on its top the first inserted element in the queue.
The front element of the queue is kept as front.

Pop an element from queue

Figure 2. Pop an element from queue
Complexity Analysis

    Time complexity : O(1)O(1)O(1).
    Space complexity : O(1)O(1)O(1).

Empty

Stack s1 contains all stack elements, so the algorithm checks s1 size to return if the queue is empty.
Complexity Analysis

    Time complexity : O(1)O(1)O(1).
    Space complexity : O(1)O(1)O(1).

Peek

The front element is kept in constant memory and is modified when we push or pop an element.
Complexity Analysis

    Time complexity : O(1)O(1)O(1). The front element has been calculated in advance and only returned in peek operation.
    Space complexity : O(1)O(1)O(1).

----------------------------------------------------------------------
Approach #2 (Two Stacks) Push - O(1)O(1)O(1) per operation, Pop - Amortized O(1)O(1)O(1) per operation.
Push

The newly arrived element is always added on top of stack s1 and the first element is kept as front queue element

Push an element in queue

Figure 3. Push an element in queue
Complexity Analysis

    Time complexity : O(1)O(1)O(1). –êppending an element to a stack is an O(1) operation.

    Space complexity : O(n)O(n)O(n). We need additional memory to store the queue elements

Pop

We have to remove element in front of the queue. This is the first inserted element in the stack s1 and it is positioned at the bottom of the stack because of stack's LIFO (last in - first out) policy. To remove the bottom element from s1, we have to pop all elements from s1 and to push them on to an additional stack s2, which helps us to store the elements of s1 in reversed order. This way the bottom element of s1 will be positioned on top of s2 and we can simply pop it from stack s2. Once s2 is empty, the algorithm transfer data from s1 to s2 again.

Pop an element from stack

Figure 4. Pop an element from stack
Complexity Analysis

    Time complexity: Amortized O(1)O(1)O(1), Worst-case O(n)O(n)O(n). In the worst case scenario when stack s2 is empty, the algorithm pops nnn elements from stack s1 and pushes nnn elements to s2, where nnn is the queue size. This gives 2n2n2n operations, which is O(n)O(n)O(n). But when stack s2 is not empty the algorithm has O(1)O(1)O(1) time complexity. So what does it mean by Amortized O(1)O(1)O(1)? Please see the next section on Amortized Analysis for more information.

    Space complexity : O(1)O(1)O(1).

Amortized Analysis

Amortized analysis gives the average performance (over time) of each operation in the worst case. 